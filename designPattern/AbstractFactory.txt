Abstract Factory Method
Provide an interface for creating families of related or dependent objects without specifying their concrete classes
When there is a need for abstraction between client and base class
Abstract Factory design pattern provides approach to code for interface rather than implementation.
Abstract Factory pattern is “factory of factories” and can be easily extended to accommodate more products
Abstract Factory pattern is robust and avoid conditional logic of Factory pattern.
In this for every concrete class we provide a factory class


Factory Method    
Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
Factory Method is used to create one product only but Abstract Factory is about creating families of related or dependent products.
It depends on inheritance to decide which product to be created while a separate class is there that is dedicated to create a family of classes

Observer Pattern Method
Observer Pattern is one of the behavioral design pattern. 
Observer design pattern is useful when you are interested in the state of an object and want to get notified whenever there is any change. 
In observer pattern, the object that watch on the state of another object are called Observer and the object that is being watched is called Subject.


ObserverPattern
The adapter pattern convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces. 